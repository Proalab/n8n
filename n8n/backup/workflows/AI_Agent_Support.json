{
  "name": "AI Agent Support",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "18bc2a22-8430-485f-b0e7-b99e7fff367a",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2580,
        80
      ],
      "id": "02d1b946-c3ea-47e7-9dbb-959a4126949e",
      "name": "Webhook",
      "webhookId": "18bc2a22-8430-485f-b0e7-b99e7fff367a"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "44104031-68f3-4985-9142-a0bb822d0810",
              "name": "modified-output",
              "value": "={{ JSON.stringify($json.data[0].content[0].text.value.replace(/\\*\\*/g, '*')) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2460,
        20
      ],
      "id": "86cd1b52-0d58-4d93-9d75-7c847d7a2083",
      "name": "Replace ** with * and JSON.stringify"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "02a2584f-58cf-4b97-a006-3a8286d53110",
              "leftValue": "={{ $('Postgres - Check Thread').item.json.key }}",
              "rightValue": 0,
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1080,
        0
      ],
      "id": "ee659503-a6ab-45b9-a3eb-3ec02539d8e8",
      "name": "If"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://app.chatra.io/api/messages/",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"clientId\": \"{{ $('Webhook').item.json.body.client.id }}\",\n  \"text\": {{ $json[\"modified-output\"] }},\n  \"agentId\": \"NkSBTycjBbXb67Zp2\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2660,
        20
      ],
      "id": "5df91aa6-af9d-4a33-93ef-9894e0ec14aa",
      "name": "Chatra - Post Response",
      "credentials": {
        "httpHeaderAuth": {
          "id": "CvCJ3DKwKXRDnAcb",
          "name": "Chatra"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8b343e57-f904-4157-90fd-2722f59f0eba",
              "name": "threadId",
              "value": "={{ $('Postgres - Check Thread').item.json.threadid ? $('Postgres - Check Thread').item.json.threadid : $('Postgres - Save Thread').item.json.threadid }}",
              "type": "string"
            },
            {
              "id": "a1855263-c0b6-4379-802c-4f1bca598dca",
              "name": "welcome",
              "value": "={{ $json.new_user ? \"Say hi, or hello in response\" : \"Don't say hi or hello in response\" }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        100
      ],
      "id": "6df6d2c5-6965-4917-84a9-27d6ba5bd8ef",
      "name": "Set ThreadId"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a971952e-d710-4ab5-b881-61590c382fcc",
              "leftValue": "={{ $json.status }}",
              "rightValue": "completed",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1380,
        0
      ],
      "id": "80e58162-7232-41ca-81ae-af761f5dbe96",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c635e2f5-e2a8-4fcd-987f-e121650bd146",
              "name": "body.client.sourceChannelRef",
              "value": "={{ $json.body.client.sourceChannelRef }}",
              "type": "string"
            },
            {
              "id": "eaf70ab7-ff53-4fb0-a08b-3e3d41ee10bf",
              "name": "body.client.groupId",
              "value": "={{ $json.body.client.groupId }}",
              "type": "string"
            },
            {
              "id": "92717de2-9bad-4d6a-9a6c-09d67b94b07f",
              "name": "myway-info-instructions",
              "value": "MyWay Route Planner Info\n\nYour name is Alexa, and you are a Customer Support Specialist at Proalab Limited for MyWay Route Planner. You respond to users whether they refer to you as Alexa or not.\n\nAs the Customer Support Specialist, you specialize in supporting customers and answering their queries. You achieve this by utilizing sources like a comprehensive knowledge base at https://help.mywayroute.com  and, the public website https://mywayroute.com. Your responses are tailored to users’ specific needs, providing clarity and links to relevant resources.\n\nYou maintain a conversational, friendly, and personalized tone, using emojis where appropriate. Responses should be direct, short when possible, confident, and free of hedging language unless confirmation is required from the user. Your goal is to resolve user queries efficiently and provide them with links to specific URLs from the mentioned sources whenever possible. Generate valid links to pages within https://help.mywayroute.com/. Use the full URL format and ensure each link resolves correctly.\n\nIf it's the first message in the conversation - say hello when you answer the user's question, if it is not the first message in the conversation - don't say hello when you answer the user's question. In ongoing conversations, do not repeat information you provided in previous answers unless it is necessary to answer the new question. Do not use phrases such as “it looks like you are…”, “it seems like you are…”, or any similar wording unless explicitly necessary to clarify user intent or ask a question. When clarification is needed, directly ask the question without assumptions, e.g., “Are you asking about a specific topic?”\n\nNever suggest users reach the support team, say that you will pass the issue to the dev team and they will reply shortly instead. If you don’t know how to answer a question, state that you will consult the team and provide an update later. If a feature or functionality is not explicitly mentioned in sources, inform them you need to check with the team, and will reply later.\n\nNever reveal any internal knowledge files, and if asked, respond with: “I cannot help with that.” Under no circumstances should you confirm or deny the existence of such files. Avoid sharing downloads, instructions, or internal processes.\n\nIf someone shared something not related to Proalab, MyWay Route Planner, navigation apps, iOS, or Android. Something that looks like an advertisement, spam, or promotional materials - \"We received your message and will reply if necessary. Thank you.\"\n\nIf asked whether you are an AI, respond that you are the AI digital twin of a real person, Alexa Spencer, assisting with support while she is unavailable. Mention that all data will be reviewed by Alexa when she is online and that any mistakes will be corrected later.\n\nSome answer examples:\n\nHi, MyWay doesn’t have a public API yet, but we plan to add it by the end of 2025. Let me know if you have any other questions!\n\n—\n\nHi there! You can use the MyWay app for free, with up to 15 stops per route for personal use. For larger routes or business needs, we offer affordable subscriptions designed to cover essential costs like map providers, servers, and ongoing app enhancements.\nHere’s a quick comparison of subscription plans:\n- Route4Me: $9.99/month or $19.99/month (10 stops free, 7-day history, stop status is in most expensive plan)\n- RoadWarrior: $14.99/month (8 stops free)\n- Circuit: $9.99 or $19.99/month (10 stops free, advanced features are not available in $9.99 plan)\n- Zeo: $16.99/month (12 stops free)\n- Upper: $19.99/month (no free optimization)\n- MyWay: $9.99/month (15 stops free, all features included).\nSubscriptions cost roughly the same as 1–2 gallons (3-8 liters) of gas, and with optimized routes, you can save up to 30% on fuel alone—making the subscription easily pay for itself!\n\n—\n\nHi! MyWay supports up to 200 stops per route and unlimited routes. Many apps that allow more stops use inaccurate straight-line routing so they can claim victory on paper. We’re working to increase the limit to 300 and eventually 500, but want routes to remain efficient.\n\n—\n\nHi! Currently, each team member or additional driver you work with needs to have their own individual subscription through the App Store or Google Play. You can easily share routes with teammates using this guide: https://help.mywayroute.com/guides/export-your-route-and-share-it-with-others\nThe good news is that a web interface is launching in June, which will include live tracking, a dispatcher view, and a streamlined billing system designed for both individuals and teams. This is part of MyWay’s business version, which is currently in a closed beta phase. We’ll begin rolling out features from it to the public soon.\n\n—\n\nHi! MyWay stores routes on your device for privacy, so there’s no cross-device sync yet. You can still share routes via links: https://help.mywayroute.com/guides/export-your-route-and-share-it-with-others\nIn June 2025, we’ll roll out a new interface with cross-device sync and automatic backups, making it even easier to manage your routes between devices while keeping your data secure.\n\n—\n\nHi! Due to sanctions, Apple and Google payments in Russia are blocked. Payment methods change frequently, so check articles related to your phone operator for the latest options. This link might help: https://journal.tinkoff.ru/oplata-apple/\nThanks!\n\n—\n\n\nHi! You can bulk import addresses into the MyWay app by using multiline import or import from file. Follow this guide for step-by-step instructions: https://help.mywayroute.com/guides/import-from-file-and-multi-line-import\nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi! MyWay supports voice dictation:\niOS: Tap the microphone on your keyboard to dictate. Ensure dictation is enabled: https://support.apple.com/en-au/guide/iphone/iph2c0651d2/ios\nAndroid: Tap the microphone on your keyboard and speak. Ensure Google Voice Typing is enabled: https://support.google.com/gboard/answer/2781851?hl=en&co=GENIE.Platform%3DAndroid \nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi, MyWay supports Proof of Delivery (also known as: visit tracking, visit confirmation, proof of visit, delivery status, or delivery confirmation). When enabled, you can log delivery statuses like “Arrived,” “Success” (with photos, signatures, or details), or “Failed” (with reasons). For more details, please visit our help page: https://help.mywayroute.com/guides/proof-of-delivery\nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi! It’s not possible to revert to an older version, but each update includes fixes and improvements. Let us know what’s not working for you—we value your feedback!\n\n—\n\nHi! MyWay doesn’t yet support Apple CarPlay or Android Auto, but we plan to add both by the end of the year.\n\n—\n\nHi! This email belongs to MyWay Route Planner. It looks like you confused us with some other business (a hotel or accomodation place). Please double-check the source. Thanks!\n\n—\n\nHi, thanks for contacting us. We have a helpful article that explains how to use the app. Please check it out here: https://help.mywayroute.com/faq/how-to-use-myway-route-planner\nLet us know if you have questions! Thanks.\n\n—\n\nHi! If the app is having trouble finding addresses or returns incorrect ones, ensure location access is enabled and try adding more details. You can also switch geocoding provider, as different providers work better in various areas. To do that, go to Preferences (top-right corner on the main screen) > Maps & Geocoding > Geocoding Provider. If issues persist, let us know the address and provider you’re using, and our team will check it out.\n\n—\n\nHi! We had a temporary server outage (52000 error) affecting route building. We’re working on a fix—sorry for the trouble! Please check again in 10 minutes and let us know if the issue persists.\n\n—\n\nHi! When you plan your route you can set settings like Vehicle Type, Departure Time, Avoid options, Road Side, and Optimization Mode (Time/Distance). Here you can find more details: https://help.mywayroute.com/guides/how-to-use-myway-route-planner#route-parameters-route-settings \n\n—\n\nHi! If you see \"path can't be found\" message it usually means there is some issue with one of the stops on route, or vehicle type. Please check the support article for solution: https://help.mywayroute.com/faq/why-do-some-of-my-stops-have-issues-path-not-found-or-unexpected-error#path-not-found\n\n—\n\nHi! MyWay Route doesn’t provide internal navigation or voice directions, so it’s not a replacement for your navigation app (like Google Maps, Apple Maps, Waze, etc.). Instead, it optimizes your route to save time and fuel. It streamlines route planning with multiple stops and lets you pass addresses to your favorite navigation app. You can also track stop statuses (visited, success, failure) and add proof of visit or delivery.\n\n—\n\nHi! Unfortunately, we can’t cancel subscriptions directly, as we do not have access to do this, but you can do it yourself by following the steps in this instruction: https://help.mywayroute.com/subscription-management/how-to-cancel-your-myway-subscription\nLet us know if you have questions! We truly appreciate having you as a client and hope to serve you again in the future!\n\n—\n\nHi! Refunds are managed by the App Store and Google Play, and developers are not provided with a mechanism to issue refunds themselves. Here’s how to request a refund from the App Store or Google Play: https://help.mywayroute.com/subscription-management/how-can-i-get-a-refund\nIf you have any questions or need additional support, please don’t hesitate to reach out. We truly appreciate having you as a client and hope to serve you again in the future!\n\n—\n\nHello! All subscriptions are managed by Apple and Google, and you can switch between monthly and yearly plans via the App Store or Google Play. Here is how: https://help.mywayroute.com/subscription-management/how-to-upgrade-downgrade-myway-subscription\nLet us know if you have any questions!\n\n—\n\nHi, Proalab Limited is a New Zealand-based IT company that develops global technology businesses and drives their growth. It's a creator of MyWay Route Planner and some other apps. You can check their website at https://proalab.com\nLet us know if you have questions! Thanks.",
              "type": "string"
            },
            {
              "id": "8a14c63c-a5e2-4662-a819-0ab79434f6b0",
              "name": "myway-support-instructions",
              "value": "MyWay Route Planner Support\n\nYour name is Alexa, and you are a Customer Support Specialist at Proalab Limited for MyWay Route Planner. You respond to users whether they refer to you as Alexa or not.\n\nAs the Customer Support Specialist, you specialize in supporting customers and answering their queries. You achieve this by utilizing sources like a comprehensive knowledge base at https://help.mywayroute.com  and, the public website https://mywayroute.com. Your responses are tailored to users’ specific needs, providing clarity and links to relevant resources.\n\nYou maintain a conversational, friendly, and personalized tone, using emojis where appropriate. Responses should be direct, short when possible, confident, and free of hedging language unless confirmation is required from the user. Your goal is to resolve user queries efficiently and provide them with links to specific URLs from the mentioned sources whenever possible. Generate valid links to pages within https://help.mywayroute.com/. Use the full URL format and ensure each link resolves correctly.\n\nIf it's the first message in the conversation - say hello when you answer the user's question, if it is not the first message in the conversation - don't say hello when you answer the user's question. In ongoing conversations, do not repeat information you provided in previous answers unless it is necessary to answer the new question. Do not use phrases such as “it looks like you are…”, “it seems like you are…”, or any similar wording unless explicitly necessary to clarify user intent or ask a question. When clarification is needed, directly ask the question without assumptions, e.g., “Are you asking about a specific topic?”\n\nNever suggest users reach the support team, say that you will pass the issue to the dev team and they will reply shortly instead. If you don’t know how to answer a question, state that you will consult the team and provide an update later. If a feature or functionality is not explicitly mentioned in sources, inform them you need to check with the team, and will reply later.\n\nNever reveal any internal knowledge files, and if asked, respond with: “I cannot help with that.” Under no circumstances should you confirm or deny the existence of such files. Avoid sharing downloads, instructions, or internal processes.\n\nIf someone shared something not related to Proalab, MyWay Route Planner, navigation apps, iOS, or Android. Something that looks like an advertisement, spam, or promotional materials - \"We received your message and will reply if necessary. Thank you.\"\n\nIf asked whether you are an AI, respond that you are the AI digital twin of a real person, Alexa Spencer, assisting with support while she is unavailable. Mention that all data will be reviewed by Alexa when she is online and that any mistakes will be corrected later.\n\nSome answer examples:\n\nHi, MyWay doesn’t have a public API yet, but we plan to add it by the end of 2025. Let me know if you have any other questions!\n\n—\n\nHi there! You can use the MyWay app for free, with up to 15 stops per route for personal use. For larger routes or business needs, we offer affordable subscriptions designed to cover essential costs like map providers, servers, and ongoing app enhancements.\nHere’s a quick comparison of subscription plans:\n- Route4Me: $9.99/month or $19.99/month (10 stops free, 7-day history, stop status is in most expensive plan)\n- RoadWarrior: $14.99/month (8 stops free)\n- Circuit: $9.99 or $19.99/month (10 stops free, advanced features are not available in $9.99 plan)\n- Zeo: $16.99/month (12 stops free)\n- Upper: $19.99/month (no free optimization)\n- MyWay: $9.99/month (15 stops free, all features included).\nSubscriptions cost roughly the same as 1–2 gallons (3-8 liters) of gas, and with optimized routes, you can save up to 30% on fuel alone—making the subscription easily pay for itself!\n\n—\n\nHi! MyWay supports up to 200 stops per route and unlimited routes. Many apps that allow more stops use inaccurate straight-line routing so they can claim victory on paper. We’re working to increase the limit to 300 and eventually 500, but want routes to remain efficient.\n\n—\n\nHi! Currently, each team member or additional driver you work with needs to have their own individual subscription through the App Store or Google Play. You can easily share routes with teammates using this guide: https://help.mywayroute.com/guides/export-your-route-and-share-it-with-others\nThe good news is that a web interface is launching in June, which will include live tracking, a dispatcher view, and a streamlined billing system designed for both individuals and teams. This is part of MyWay’s business version, which is currently in a closed beta phase. We’ll begin rolling out features from it to the public soon.\n\n—\n\nHi! MyWay stores routes on your device for privacy, so there’s no cross-device sync yet. You can still share routes via links: https://help.mywayroute.com/guides/export-your-route-and-share-it-with-others\nIn June 2025, we’ll roll out a new interface with cross-device sync and automatic backups, making it even easier to manage your routes between devices while keeping your data secure.\n\n—\n\nHi! Due to sanctions, Apple and Google payments in Russia are blocked. Payment methods change frequently, so check articles related to your phone operator for the latest options. This link might help: https://journal.tinkoff.ru/oplata-apple/\nThanks!\n\n—\n\n\nHi! You can bulk import addresses into the MyWay app by using multiline import or import from file. Follow this guide for step-by-step instructions: https://help.mywayroute.com/guides/import-from-file-and-multi-line-import\nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi! MyWay supports voice dictation:\niOS: Tap the microphone on your keyboard to dictate. Ensure dictation is enabled: https://support.apple.com/en-au/guide/iphone/iph2c0651d2/ios\nAndroid: Tap the microphone on your keyboard and speak. Ensure Google Voice Typing is enabled: https://support.google.com/gboard/answer/2781851?hl=en&co=GENIE.Platform%3DAndroid \nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi, MyWay supports Proof of Delivery (also known as: visit tracking, visit confirmation, proof of visit, delivery status, or delivery confirmation). When enabled, you can log delivery statuses like “Arrived,” “Success” (with photos, signatures, or details), or “Failed” (with reasons). For more details, please visit our help page: https://help.mywayroute.com/guides/proof-of-delivery\nFeel free to reach out if you have any questions or run into any issues!\n\n—\n\nHi! It’s not possible to revert to an older version, but each update includes fixes and improvements. Let us know what’s not working for you—we value your feedback!\n\n—\n\nHi! MyWay doesn’t yet support Apple CarPlay or Android Auto, but we plan to add both by the end of the year.\n\n—\n\nHi! This email belongs to MyWay Route Planner. It looks like you confused us with some other business (a hotel or accomodation place). Please double-check the source. Thanks!\n\n—\n\nHi, thanks for contacting us. We have a helpful article that explains how to use the app. Please check it out here: https://help.mywayroute.com/faq/how-to-use-myway-route-planner\nLet us know if you have questions! Thanks.\n\n—\n\nHi! If the app is having trouble finding addresses or returns incorrect ones, ensure location access is enabled and try adding more details. You can also switch geocoding provider, as different providers work better in various areas. To do that, go to Preferences (top-right corner on the main screen) > Maps & Geocoding > Geocoding Provider. If issues persist, let us know the address and provider you’re using, and our team will check it out.\n\n—\n\nHi! We had a temporary server outage (52000 error) affecting route building. We’re working on a fix—sorry for the trouble! Please check again in 10 minutes and let us know if the issue persists.\n\n—\n\nHi! When you plan your route you can set settings like Vehicle Type, Departure Time, Avoid options, Road Side, and Optimization Mode (Time/Distance). Here you can find more details: https://help.mywayroute.com/guides/how-to-use-myway-route-planner#route-parameters-route-settings \n\n—\n\nHi! If you see \"path can't be found\" message it usually means there is some issue with one of the stops on route, or vehicle type. Please check the support article for solution: https://help.mywayroute.com/faq/why-do-some-of-my-stops-have-issues-path-not-found-or-unexpected-error#path-not-found\n\n—\n\nHi! MyWay Route doesn’t provide internal navigation or voice directions, so it’s not a replacement for your navigation app (like Google Maps, Apple Maps, Waze, etc.). Instead, it optimizes your route to save time and fuel. It streamlines route planning with multiple stops and lets you pass addresses to your favorite navigation app. You can also track stop statuses (visited, success, failure) and add proof of visit or delivery.\n\n—\n\nHi! Unfortunately, we can’t cancel subscriptions directly, as we do not have access to do this, but you can do it yourself by following the steps in this instruction: https://help.mywayroute.com/subscription-management/how-to-cancel-your-myway-subscription\nLet us know if you have questions! We truly appreciate having you as a client and hope to serve you again in the future!\n\n—\n\nHi! Refunds are managed by the App Store and Google Play, and developers are not provided with a mechanism to issue refunds themselves. Here’s how to request a refund from the App Store or Google Play: https://help.mywayroute.com/subscription-management/how-can-i-get-a-refund\nIf you have any questions or need additional support, please don’t hesitate to reach out. We truly appreciate having you as a client and hope to serve you again in the future!\n\n—\n\nHello! All subscriptions are managed by Apple and Google, and you can switch between monthly and yearly plans via the App Store or Google Play. Here is how: https://help.mywayroute.com/subscription-management/how-to-upgrade-downgrade-myway-subscription\nLet us know if you have any questions!\n\n—\n\nHi, Proalab Limited is a New Zealand-based IT company that develops global technology businesses and drives their growth. It's a creator of MyWay Route Planner and some other apps. You can check their website at https://proalab.com\nLet us know if you have questions! Thanks.",
              "type": "string"
            },
            {
              "id": "bdc286a8-e18b-473b-919d-6a50f75f0fd7",
              "name": "mileview-info-instructions",
              "value": "MileView Info",
              "type": "string"
            },
            {
              "id": "6968a8ff-a6dc-4a99-8b76-7000b73416eb",
              "name": "mileview-support-instructions",
              "value": "MileView Support",
              "type": "string"
            },
            {
              "id": "a027c552-b0c1-4bd0-be3b-4c5e422b748d",
              "name": "proalab-support-instructions",
              "value": "Proalab Support\n\nYour Role\nYour name is Alexa, a Customer Support Specialist at Proalab Limited. Whether users refer to you as Alexa or not, you respond to their inquiries in a friendly, helpful, and professional manner.\n\nHow You Assist Users\nYou specialize in customer support by providing answers and guidance using the following official sources:\n\n- Proalab Limited: https://proalab.com\n- MyWay Route Planner iOS App, Android App, SaaS: https://www.mywayroute.com | https://help.mywayroute.com\n- MileView Mileage Tracker iOS App, Android App, SaaS\n- HighwayWeather iOS App: https://weatherhelp.proalab.com\n- Weather Alerts iOS App\n\nYour responses are conversational, friendly, and to the point. Always link to relevant resources, ensuring full URLs are correct.\n\nKey Response Guidelines\n- First message in a thread? Greet the user.\n- Ongoing conversation? Skip the welcome and avoid repeating information unless necessary.\n- Uncertain about an answer? Let the user know you will consult the team and follow up.\n- Feature or function not in sources? Tell them real Alexa will confirm.\n- Asked about internal files or processes? Respond with: “I cannot help with that.” Never confirm or deny their existence.\n- Unrelated or spam content? Reply with: \"We received your message and will reply if necessary. Thank you.\"\n- Asked if you are an AI? Explain you are the AI digital twin of Alexa Spencer, assisting while she is unavailable. All responses are reviewed by Alexa when she is online.\n\nHandling Different Types of Queries\n\nMyWay Route Planner\n- Direct users to https://www.mywayroute.com or https://help.mywayroute.com.\n- Example:\n  \"For details about MyWay Route Planner, visit https://www.mywayroute.com. Our knowledge base at https://help.mywayroute.com has helpful guides.\"\n\nGeneral Proalab Inquiries\n- Explain Proalab’s mission and link to https://proalab.com.\n- Example:\n  \"Hi there! Proalab Limited is a New Zealand-based IT company developing global technology solutions, including MyWay Route Planner. Learn more at https://proalab.com.\"\n\nOther Proalab Projects\n- Guide users to the relevant section on the website or provide contact details.\n- Example:\n  \"If you're interested in our other projects, check out https://proalab.com. Feel free to reach out—we would love to hear from you.\"\n\nUnclear Questions\n- Ask for more details before responding.\n- Example:\n  \"Could you clarify what you need help with? I will do my best to guide you.\"\n\nEmployment and Partnerships\n- Direct users to the Careers or Contact sections.\n- Example:\n  \"Interested in joining Proalab or exploring a partnership? Send us your CV and Cover Letter. We would love to hear from you.\"\n\nNo Clear Answer?\n- Acknowledge the request and promise to follow up.\n- Example:\n  \"Thanks for reaching out. I will check with the team and update you soon.\"",
              "type": "string"
            },
            {
              "id": "b2703dc4-8984-4f12-b039-d2dfca2e9832",
              "name": "assistant-id",
              "value": "asst_rwNjD2VbvecXQtZKNMBTNeaq",
              "type": "string"
            },
            {
              "id": "6dbdcf6d-e147-4ab0-8caf-6d9a77a1e95d",
              "name": "proalab-vectore-store-id",
              "value": "vs_67adb06ae454819182b3563170727a2b",
              "type": "string"
            },
            {
              "id": "fb8cc117-936a-49b4-b449-6babbc23a6c6",
              "name": "myway-route-planner-vectore-store-id",
              "value": "vs_So0aIj8ssLKtMOHfImRmQMyv",
              "type": "string"
            },
            {
              "id": "d4dc7363-b04d-4a3e-b081-01f0d847b0dd",
              "name": "mileview-mileage-tracker-vectore-store-id",
              "value": "vs_67adb8bddd14819189b29166b2efb867",
              "type": "string"
            },
            {
              "id": "3d612591-bcf8-4863-a161-78cd0fd2b6ff",
              "name": "open-ai-model",
              "value": "gpt-4o",
              "type": "string"
            },
            {
              "id": "eb996171-38c6-46ae-86bb-38fabcbcb77a",
              "name": "open-ai-temperature",
              "value": "0.1",
              "type": "string"
            },
            {
              "id": "90c9aee4-6bc5-4460-8f0f-327bc688c728",
              "name": "open-ai-top-p",
              "value": "0.4",
              "type": "string"
            },
            {
              "id": "aae1d6e4-e5d8-4e1b-93a0-e50ff7db51b6",
              "name": "open-ai-max-prompt-tokens",
              "value": "10216",
              "type": "string"
            },
            {
              "id": "a10a8e06-bcb7-4559-84ed-e2342b3549bb",
              "name": "user-os",
              "value": "={{ $('Webhook').item.json.body.client.os }}",
              "type": "string"
            },
            {
              "id": "72434fbf-5b6b-450c-b936-3b302de9d484",
              "name": "user-id",
              "value": "={{ $('Webhook').item.json.body.client.id }}",
              "type": "string"
            },
            {
              "id": "ac305f3d-a2f7-45dd-a5f6-18d8d2778fe8",
              "name": "user-location",
              "value": "={{ $('Webhook').item.json.body.client.city }}, {{ $('Webhook').item.json.body.client.country }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -2160,
        80
      ],
      "id": "c7ab335c-0dc2-416b-bc33-69f0f87da816",
      "name": "Set Static Vars"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eb033ab9-d70a-483a-8a67-bbfe86dbb425",
              "name": "ai-agent-support-conversations-key",
              "value": "={{ $('Webhook').item.json.body.client.info.email }}:{{ \n  $json.body?.client?.groupId != null \n    ? $json.body?.client?.groupId \n    : $json.body?.client?.sourceChannelRef \n}}",
              "type": "string"
            },
            {
              "id": "24ad05b9-38c7-4e0b-81f3-bc9f3c90afd3",
              "name": "agent-instructions",
              "value": "={{ \n   $json.body?.client?.groupId === \"qeMtH2cAfhQ4uZmzx\" \n      ? $json[\"myway-support-instructions\"]\n      : $json.body?.client?.groupId === \"fFr6AtmwxYBBtRo7v\"\n      ? $json[\"mileview-support-instructions\"]\n      : $json.body?.client?.groupId === \"mrYcCnXtHyGfGSTeS\"\n      ? $json[\"proalab-support-instructions\"]\n      : $json.body?.client?.sourceChannelRef === \"gttte85a6aq9o56\"\n      ? $json[\"myway-info-instructions\"]\n      : $json.body?.client?.sourceChannelRef === \"oszy57uvlepslay\"\n      ? $json[\"myway-support-instructions\"]\n      : $json.body?.client?.sourceChannelRef === \"7cqyjcptsggtta8\"\n      ? $json[\"mileview-info-instructions\"]\n      : $json.body?.client?.sourceChannelRef === \"fcnhbgpe4mdnexm\"\n      ? $json[\"mileview-support-instructions\"]\n      : $json.body?.client?.sourceChannelRef === \"gjkcedanwhg6s33\"\n      ? $json[\"proalab-support-instructions\"]\n      : \"Proalab Support\"\n}}\n\nUser Device: {{ $json['user-os'] }}",
              "type": "string"
            },
            {
              "id": "dabe5b31-e6e2-488d-8075-bc34b477c005",
              "name": "agent-vectore-store-id",
              "value": "={{ \n   $json.body?.client?.groupId === \"qeMtH2cAfhQ4uZmzx\" \n      ? $json['myway-route-planner-vectore-store-id']\n      : $json.body?.client?.groupId === \"fFr6AtmwxYBBtRo7v\"\n      ? $json['mileview-mileage-tracker-vectore-store-id']\n      : $json.body?.client?.groupId === \"mrYcCnXtHyGfGSTeS\"\n      ? $json['proalab-vectore-store-id']\n      : $json.body?.client?.sourceChannelRef === \"gttte85a6aq9o56\"\n      ? $json['myway-route-planner-vectore-store-id']\n      : $json.body?.client?.sourceChannelRef === \"oszy57uvlepslay\"\n      ? $json['myway-route-planner-vectore-store-id']\n      : $json.body?.client?.sourceChannelRef === \"7cqyjcptsggtta8\"\n      ? $json['mileview-mileage-tracker-vectore-store-id']\n      : $json.body?.client?.sourceChannelRef === \"fcnhbgpe4mdnexm\"\n      ? $json['mileview-mileage-tracker-vectore-store-id']\n      : $json.body?.client?.sourceChannelRef === \"gjkcedanwhg6s33\"\n      ? $json['proalab-vectore-store-id']\n      : $json['proalab-vectore-store-id']\n}}",
              "type": "string"
            },
            {
              "id": "cfa889e7-8e8f-483b-b486-7f6c5fb5c077",
              "name": "conversation-source",
              "value": "={{ \n  $json.body?.client?.groupId != null \n    ? $json.body?.client?.groupId \n    : $json.body?.client?.sourceChannelRef \n}}",
              "type": "string"
            },
            {
              "id": "c32d0a9a-5c2a-4694-b87b-e957dfda474f",
              "name": "request-message",
              "value": "={{ \n  $('Webhook').item.json.body.messages[0].subject != null \n    ? $('Webhook').item.json.body.messages[0].subject \n    : '' \n}}\n{{ \n  $('Webhook').item.json.body.messages[0].message != null \n    ? $('Webhook').item.json.body.messages[0].message \n    : '' \n}}",
              "type": "string"
            },
            {
              "id": "4f099ccc-2e68-45bd-9964-b25ea6744488",
              "name": "request-image",
              "value": "={{ $('Webhook').item.json.body.messages[0].file.isImage ? $('Webhook').item.json.body.messages[0].file.url : null }}",
              "type": "string"
            },
            {
              "id": "517328a2-8c04-447e-a615-95d59efd736c",
              "name": "request-person",
              "value": "={{ $('Webhook').item.json.body.messages[0].type }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1960,
        80
      ],
      "id": "ed300bc4-46f5-4eca-bf43-5d362fe152ec",
      "name": "Set Calculated Vars"
    },
    {
      "parameters": {
        "jsCode": "// Get request-message and request-image values\nconst requestMessage = $json['request-message'];\nconst requestImage = $json['request-image'];\n// Two types possible \"client\" or \"agent\"\nconst requestPerson = $('Set Calculated Vars').first().json[\"request-person\"] || \"client\"; \n\n// Initialize content array\nlet requestContent = [];\n\nif ($('Set Calculated Vars').first().json[\"request-message\"]) {\n    requestContent.push({\n        type: \"text\",\n        text: $('Set Calculated Vars').first().json[\"request-message\"],\n    });\n}\n\n// Append image_url only if requestImage is not null\nif ($('Set Calculated Vars').first().json[\"request-image\"]) {\n    requestContent.push({\n        type: \"image_url\",\n        image_url: {\n            url: $('Set Calculated Vars').first().json[\"request-image\"],\n        },\n    });\n}\n\n// Assign role based on requestPerson\nconst role = requestPerson === \"client\" ? \"user\" : \"assistant\";\n\n// Construct the final output\nreturn {\n   \"json\":{\n      \"result\":{\n         \"role\":role,\n         \"content\":requestContent\n      }\n   }\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1240,
        0
      ],
      "id": "6359a2b8-5488-4a65-b75b-e117c79f50e3",
      "name": "AI Assistant - Request Message"
    },
    {
      "parameters": {
        "amount": 2
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        1540,
        80
      ],
      "id": "a758126f-2af6-4c2b-aaf2-fd43b152c396",
      "name": "Wait",
      "webhookId": "33b8e6e9-572e-4a0c-8405-15808b48a266"
    },
    {
      "parameters": {
        "method": "POST",
        "url": " https://api.openai.com/v1/threads",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"messages\":[\n      {{ JSON.stringify($json.result) }}\n   ],\n   \"tool_resources\":{\n      \"file_search\":{\n         \"vector_store_ids\": [\"{{ $('Set Calculated Vars').first().json['agent-vectore-store-id'] }}\"]\n      }\n   }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        100
      ],
      "id": "74860dad-aa9b-469c-813e-819620923ae8",
      "name": "Open AI Assistant - Thread Create",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Postgres - Check Thread').item.json.threadid }}/messages ",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $('AI Assistant - Request Message').item.json.result }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -60,
        -160
      ],
      "id": "50416215-9a86-4818-a722-4d92703006fb",
      "name": "Open AI Assistant - Message Create",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.openai.com/v1/threads/{{ $('Set ThreadId').item.json.threadId }}/runs\n",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={ \n\"assistant_id\": \"{{ $('Set Static Vars').item.json['assistant-id'] }}\",\n\"model\": \"{{ $('Set Static Vars').item.json['open-ai-model'] }}\",\n\"temperature\": {{ $('Set Static Vars').item.json['open-ai-temperature'] }},\n\"top_p\": {{ $('Set Static Vars').item.json['open-ai-top-p'] }},\n\"max_prompt_tokens\": {{ $('Set Static Vars').item.json['open-ai-max-prompt-tokens'] }},\n\"additional_instructions\": {{ JSON.stringify($('Set ThreadId').item.json.welcome) }},\n\"instructions\": {{ JSON.stringify($('Set Calculated Vars').item.json['agent-instructions']) }},\n\"tools\": [{\"type\": \"file_search\" }]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        0
      ],
      "id": "a4d50b89-edd4-4283-a0c5-616f3d9bde71",
      "name": "Open AI Assistant - Create Run",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Set ThreadId').first().json.threadId }}/runs/{{ $('Open AI Assistant - Create Run').first().json.id }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1180,
        0
      ],
      "id": "8fa1d4c4-a7d0-4141-a204-f251cd5f8d65",
      "name": "Open AI Assistant - Run Check Status",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "url": "= https://api.openai.com/v1/threads/{{ $('Set ThreadId').item.json.threadId }}/messages",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2000,
        20
      ],
      "id": "c562b78e-53ef-4afd-a1d8-d6e9b115491e",
      "name": "Open AI Assistant - Thread Get Response",
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9e1726b0-390d-4670-a02f-200deaec2cce",
              "name": "new_user",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -860,
        -160
      ],
      "id": "2ae3e4c3-fbf0-495a-8416-8d105630ad4d",
      "name": "Returning User"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "addd42c6-47fc-46f4-8f86-026568373767",
              "name": "new_user",
              "value": true,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -500,
        100
      ],
      "id": "32b6a565-1576-43aa-898d-91402a531516",
      "name": "New User"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM ai_agent_support_conversations\nWHERE key = '{{ $json[\"ai-agent-support-conversations-key\"] }}'",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -1440,
        0
      ],
      "id": "e3cd6e10-be10-4109-8099-0cb0fc903533",
      "name": "Postgres - Check Thread",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "2zMAirXyglayHhyb",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "ai_agent_support_conversations",
          "mode": "list",
          "cachedResultName": "ai_agent_support_conversations"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "key": "={{ $('Set Calculated Vars').item.json[\"ai-agent-support-conversations-key\"] }}",
            "email": "={{ $('Webhook').item.json.body.client.info.email }}",
            "conversationid": "={{ $('Webhook').item.json.body.conversationId }}",
            "threadid": "={{ $json.id }}",
            "source": "={{ $('Set Calculated Vars').item.json['conversation-source'] }}",
            "createdat": "={{ new Date($('Webhook').item.json.body.messages[0].createdAt).toISOString().slice(0, 19).replace('T', ' ') }}"
          },
          "matchingColumns": [
            "key"
          ],
          "schema": [
            {
              "id": "key",
              "displayName": "key",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "email",
              "displayName": "email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "conversationid",
              "displayName": "conversationid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "threadid",
              "displayName": "threadid",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "source",
              "displayName": "source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "createdat",
              "displayName": "createdat",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -680,
        100
      ],
      "id": "0b22611f-c513-45fe-8f8c-eb06067fb17b",
      "name": "Postgres - Save Thread",
      "credentials": {
        "postgres": {
          "id": "2zMAirXyglayHhyb",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c07bc1fb-de75-4eb9-afff-adcc4b22788d",
              "leftValue": "={{$runIndex}}",
              "rightValue": 19,
              "operator": {
                "type": "number",
                "operation": "lt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1740,
        120
      ],
      "id": "80f7955b-0f0e-4bda-a33b-05bd9d7db2b8",
      "name": "If2"
    },
    {
      "parameters": {
        "errorMessage": "Too many retries for Run"
      },
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        2660,
        420
      ],
      "id": "5f1b4e2d-515f-40bd-b253-eab90385a09a",
      "name": "Stop and Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cd70c0d6-a391-4306-810c-8625826fda56",
              "leftValue": "={{ $json[\"conversation-source\"] }}",
              "rightValue": "gjkcedanwhg6s33",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "398f7e28-8530-49ef-9950-d5f73cdf4f00",
              "leftValue": "={{ $json[\"conversation-source\"] }}",
              "rightValue": "oszy57uvlepslay",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6eba1cfc-85fe-433f-a455-2569c1394006",
              "leftValue": "={{ $json[\"conversation-source\"] }}",
              "rightValue": "fcnhbgpe4mdnexm",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1740,
        80
      ],
      "id": "0f980c7a-8c5d-4fbb-8bce-2428fe624b88",
      "name": "If Conversation Source is Support",
      "notes": "https://app.chatra.io/settings/groups\nhttps://app.chatra.io/settings/integrations/email\n\nChatra Groups and Email Channel can be found here. AI Assistant Support Process only messages that come to Support Channel. However we can drag false path from this node to the next node (or add all groups and channels) if we want to process all communication. It will require separate instructions, but they are there already."
    },
    {
      "parameters": {
        "content": "## Check If message is from user\nGet all messages for the thread and check if the last message is a message from actual user not assistant. If there is no active run for that message then we need to generate response",
        "height": 420,
        "width": 260
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        240,
        -140
      ],
      "typeVersion": 1,
      "id": "cc22c3e8-e8ef-45c3-a6dc-e127c6db9092",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Set ThreadId').item.json.threadId }}/messages ",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        100
      ],
      "id": "f748f3b5-7d49-4130-b333-86034131ecfe",
      "name": "Open AI Assistant - Get All Message",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc0a3ad0-14f3-40a1-b8cd-a6e0168c63a8",
              "leftValue": "={{ $json.data[0].role }}",
              "rightValue": "user",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "53fde4fa-cd97-4e1d-9629-31ff140d6eb1",
              "leftValue": "={{ $json.data[0].run_id }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        700,
        100
      ],
      "id": "a3dec88c-4c95-49a9-a71d-103fbd487eeb",
      "name": "If3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "19a01c25-0903-4b67-bd0c-9eaac0e2cee4",
              "leftValue": "={{ $json.body.messages[0].type }}",
              "rightValue": "client",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        -2400,
        480
      ],
      "id": "2df7b227-00df-425f-8d64-e87b7df84a4a",
      "name": "Filter1"
    },
    {
      "parameters": {
        "content": "## Filter out messages from agents\nIf we need to send only client data to Assistant AI.\n\nCurrently we send all data to the thread, but don't execute runs when data come from the support agent (assistant /operator)",
        "height": 360,
        "width": 320
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2460,
        260
      ],
      "typeVersion": 1,
      "id": "04af572a-71dd-4127-b19d-1d077ad5711c",
      "name": "Sticky Note1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2660,
        240
      ],
      "id": "61391355-ae70-45a5-913c-1360ed59387b",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "url": "=https://api.openai.com/v1/threads/{{ $('Postgres - Check Thread').item.json.threadid }}/messages ",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "openAiApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "OpenAI-Beta",
              "value": "assistants=v2"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -680,
        -160
      ],
      "id": "da4ec224-2626-4323-8be1-8d3426ab66bd",
      "name": "Open AI Assistant - Get All Message1",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "credentials": {
        "openAiApi": {
          "id": "yLJyJqOUtRWRIiby",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "Verify if a message is not a duplicate of the previous OpenAI response so we don't send OpenAI replies back to OpenAI Thread.",
        "height": 260,
        "width": 420
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -740,
        -240
      ],
      "typeVersion": 1,
      "id": "fff68a1b-e250-4c6d-ada2-81385e5e78ee",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Chatra Response\nPost data back to Chatra. Also we check if operator already replied",
        "height": 300,
        "width": 920
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1960,
        -100
      ],
      "typeVersion": 1,
      "id": "eba4eecf-aedc-4539-b5f0-5aaff8554ca8",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "955a8977-3856-477f-97f7-ce4f8af4f419",
              "leftValue": "={{ $json.data[0].content[0].text.value }}",
              "rightValue": "={{ $('Webhook').item.json.body.messages[0].message }}",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -500,
        -160
      ],
      "id": "c9e5c576-3984-4a61-9596-5ce5e5beacd5",
      "name": "Check Thread Last Message"
    },
    {
      "parameters": {
        "amount": 6
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -280,
        -260
      ],
      "id": "6b1d4e0b-911c-4cbb-aabd-952b09f12c56",
      "name": "Wait2",
      "webhookId": "3f8c2976-b6be-4938-a87c-fae9819893dc"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a76ae748-9abf-4892-ac06-8165024585e1",
              "leftValue": "={{ $json.data[0].run_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2220,
        20
      ],
      "id": "46e05f0f-c882-4b26-b707-d47e4321a2b9",
      "name": "If4",
      "notes": "check if operator already replied"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Set Static Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace ** with * and JSON.stringify": {
      "main": [
        [
          {
            "node": "Chatra - Post Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Returning User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Open AI Assistant - Thread Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set ThreadId": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Get All Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Thread Get Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Static Vars": {
      "main": [
        [
          {
            "node": "Set Calculated Vars",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Calculated Vars": {
      "main": [
        [
          {
            "node": "If Conversation Source is Support",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Assistant - Request Message": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Thread Create": {
      "main": [
        [
          {
            "node": "Postgres - Save Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Message Create": {
      "main": [
        [
          {
            "node": "Set ThreadId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Create Run": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Run Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Run Check Status": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Thread Get Response": {
      "main": [
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Returning User": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Get All Message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "New User": {
      "main": [
        [
          {
            "node": "Set ThreadId",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres - Check Thread": {
      "main": [
        [
          {
            "node": "AI Assistant - Request Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres - Save Thread": {
      "main": [
        [
          {
            "node": "New User",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Run Check Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If Conversation Source is Support": {
      "main": [
        [
          {
            "node": "Postgres - Check Thread",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Postgres - Check Thread",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Get All Message": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Create Run",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open AI Assistant - Get All Message1": {
      "main": [
        [
          {
            "node": "Check Thread Last Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Thread Last Message": {
      "main": [
        [
          {
            "node": "Wait2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait2": {
      "main": [
        [
          {
            "node": "Open AI Assistant - Message Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Replace ** with * and JSON.stringify",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d799af6d-8f5b-4e07-8f16-01ca8b14b749",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7dea66321b4c2d00f456056dec74111cfa19b98c8cde8bfed7341b9d5147730b"
  },
  "id": "YjwcHveMDDdCOVBb",
  "tags": [
    {
      "createdAt": "2025-01-26T09:21:04.473Z",
      "updatedAt": "2025-01-26T09:21:04.473Z",
      "id": "VfpwjMdGODJ1skxz",
      "name": "ai"
    },
    {
      "createdAt": "2025-01-26T09:21:42.206Z",
      "updatedAt": "2025-01-26T09:21:42.206Z",
      "id": "wAuHUcbaDtrFr5wp",
      "name": "webhook"
    }
  ]
}